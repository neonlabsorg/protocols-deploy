{
  "address": "0x35EC31Aaf46e77be441C361Da74158527C6c9359",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_corePoolComptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wbnb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vbnb",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTotalPercentage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loopsLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredLoops",
          "type": "uint256"
        }
      ],
      "name": "MaxLoopsLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "calledContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "methodSignature",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AssetReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IProtocolShareReserve.IncomeType",
          "name": "incomeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        }
      ],
      "name": "AssetsReservesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "percentage",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        }
      ],
      "name": "DistributionConfigAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "percentage",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        }
      ],
      "name": "DistributionConfigRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldPercentage",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newPercentage",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        }
      ],
      "name": "DistributionConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxLoopsLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newmaxLoopsLimit",
          "type": "uint256"
        }
      ],
      "name": "MaxLoopsLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldPoolRegistry",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPoolRegistry",
          "type": "address"
        }
      ],
      "name": "PoolRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "ReservesUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CORE_POOL_COMPTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERCENT",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "contract IAccessControlManagerV8",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ProtocolShareReserve.Schema",
              "name": "schema",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "percentage",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "destination",
              "type": "address"
            }
          ],
          "internalType": "struct ProtocolShareReserve.DistributionConfig[]",
          "name": "configs",
          "type": "tuple[]"
        }
      ],
      "name": "addOrUpdateDistributionConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "assetsReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "distributionTargets",
      "outputs": [
        {
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "percentage",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        }
      ],
      "name": "getPercentageDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getUnreleasedFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loopsLimit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLoopsLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "releaseFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ProtocolShareReserve.Schema",
          "name": "schema",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "removeDistributionConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolRegistry",
          "type": "address"
        }
      ],
      "name": "setPoolRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalAssetReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDistributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "comptroller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "enum IProtocolShareReserve.IncomeType",
          "name": "incomeType",
          "type": "uint8"
        }
      ],
      "name": "updateAssetsState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c2fe9eb246deefba4460212f9a3147b94a5167d2dfa16e99e78e7e267b8d18f",
  "receipt": {
    "to": null,
    "from": "0xAB1c34b53F12980a4fa9043B70c864CEE6891c0C",
    "contractAddress": "0x35EC31Aaf46e77be441C361Da74158527C6c9359",
    "transactionIndex": 0,
    "gasUsed": "86479480",
    "logsBloom": "0x
    "blockHash": "0x41eb985e689d5b2ecbe9eb790b5903ef62e45ea683fccc5aa63c43c8f480a14d",
    "transactionHash": "0x8c2fe9eb246deefba4460212f9a3147b94a5167d2dfa16e99e78e7e267b8d18f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 296206356,
        "transactionHash": "0x8c2fe9eb246deefba4460212f9a3147b94a5167d2dfa16e99e78e7e267b8d18f",
        "address": "0x35EC31Aaf46e77be441C361Da74158527C6c9359",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x41eb985e689d5b2ecbe9eb790b5903ef62e45ea683fccc5aa63c43c8f480a14d"
      }
    ],
    "blockNumber": 296206356,
    "cumulativeGasUsed": "86479480",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000001",
    "0x0000000000000000000000000000000000000001",
    "0x0000000000000000000000000000000000000001"
  ],
  "numDeployments": 1,
  "solcInputHash": "9fb535a58937a08c38529913271f4d87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_corePoolComptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wbnb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vbnb\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTotalPercentage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loopsLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredLoops\",\"type\":\"uint256\"}],\"name\":\"MaxLoopsLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"calledContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"methodSignature\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IProtocolShareReserve.IncomeType\",\"name\":\"incomeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"}],\"name\":\"AssetsReservesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"}],\"name\":\"DistributionConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"}],\"name\":\"DistributionConfigRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldPercentage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newPercentage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"}],\"name\":\"DistributionConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxLoopsLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newmaxLoopsLimit\",\"type\":\"uint256\"}],\"name\":\"MaxLoopsLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPoolRegistry\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPoolRegistry\",\"type\":\"address\"}],\"name\":\"PoolRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"ReservesUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CORE_POOL_COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERCENT\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"contract IAccessControlManagerV8\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"internalType\":\"struct ProtocolShareReserve.DistributionConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"name\":\"addOrUpdateDistributionConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"assetsReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionTargets\",\"outputs\":[{\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"}],\"name\":\"getPercentageDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getUnreleasedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loopsLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLoopsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"releaseFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ProtocolShareReserve.Schema\",\"name\":\"schema\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"removeDistributionConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolRegistry\",\"type\":\"address\"}],\"name\":\"setPoolRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAssetReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"enum IProtocolShareReserve.IncomeType\",\"name\":\"incomeType\",\"type\":\"uint8\"}],\"name\":\"updateAssetsState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"addOrUpdateDistributionConfigs((uint8,uint16,address)[])\":{\"details\":\"Add or update destination targets based on destination address\",\"params\":{\"configs\":\"configurations of the destinations.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getPercentageDistribution(address,uint8)\":{\"details\":\"Used to find out the percentage distribution for a particular destination based on schema\",\"params\":{\"destination\":\"the destination address of the distribution target\",\"schema\":\"the schema of the distribution target\"},\"returns\":{\"_0\":\"percentage percentage distribution\"}},\"getUnreleasedFunds(address,uint8,address,address)\":{\"details\":\"Used to find out the amount of funds that's going to be released when release funds is called.\",\"params\":{\"asset\":\"the asset address which will be released\",\"comptroller\":\"the comptroller address of the pool\",\"destination\":\"the destination address of the distribution target\",\"schema\":\"the schema of the distribution target\"}},\"initialize(address,uint256)\":{\"details\":\"Initializes the deployer to owner.\",\"params\":{\"_accessControlManager\":\"The address of ACM contract\",\"_loopsLimit\":\"Limit for the loops in the contract to avoid DOS\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"releaseFunds(address,address[])\":{\"details\":\"Release funds\",\"params\":{\"assets\":\"assets to be released to distribution targets\",\"comptroller\":\"the comptroller address of the pool\"}},\"removeDistributionConfig(uint8,address)\":{\"details\":\"Remove destionation target if percentage is 0\",\"params\":{\"destination\":\"destination address of the configuration\",\"schema\":\"schema of the configuration\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAccessControlManager(address)\":{\"custom:access\":\"Only Governance\",\"custom:event\":\"Emits NewAccessControlManager event\",\"details\":\"Admin function to set address of AccessControlManager\",\"params\":{\"accessControlManager_\":\"The new address of the AccessControlManager\"}},\"setPoolRegistry(address)\":{\"custom:error\":\"ZeroAddressNotAllowed is thrown when pool registry address is zero\",\"details\":\"Pool registry setter.\",\"params\":{\"_poolRegistry\":\"Address of the pool registry\"}},\"totalDistributions()\":{\"details\":\"Returns the total number of distribution targets\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"updateAssetsState(address,address,uint8)\":{\"details\":\"Update the reserve of the asset for the specific pool after transferring to the protocol share reserve.\",\"params\":{\"asset\":\"Asset address.\",\"comptroller\":\"Comptroller address (pool)\",\"incomeType\":\"type of income\"}}},\"stateVariables\":{\"CORE_POOL_COMPTROLLER\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"WBNB\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"},\"vBNB\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"errors\":{\"MaxLoopsLimitExceeded(uint256,uint256)\":[{\"notice\":\"Thrown an error on maxLoopsLimit exceeds for any loop\"}],\"Unauthorized(address,address,string)\":[{\"notice\":\"Thrown when the action is prohibited by AccessControlManager\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"events\":{\"AssetReleased(address,address,uint8,uint256,uint256)\":{\"notice\":\"Event emitted when an asset is released to a target\"},\"AssetsReservesUpdated(address,address,uint256,uint8,uint8)\":{\"notice\":\"Event emitted after updating of the assets reserves.\"},\"DistributionConfigAdded(address,uint16,uint8)\":{\"notice\":\"Event emitted when distribution configuration is added\"},\"DistributionConfigRemoved(address,uint16,uint8)\":{\"notice\":\"Event emitted when distribution configuration is removed\"},\"DistributionConfigUpdated(address,uint16,uint16,uint8)\":{\"notice\":\"Event emitted when distribution configuration is updated\"},\"MaxLoopsLimitUpdated(uint256,uint256)\":{\"notice\":\"Emitted when max loops limit is set\"},\"NewAccessControlManager(address,address)\":{\"notice\":\"Emitted when access control manager contract address is changed\"},\"PoolRegistryUpdated(address,address)\":{\"notice\":\"Emitted when pool registry address is updated\"},\"ReservesUpdated(address,address,uint8,uint256,uint256)\":{\"notice\":\"Event emitted when asset reserves state is updated\"}},\"kind\":\"user\",\"methods\":{\"CORE_POOL_COMPTROLLER()\":{\"notice\":\"address of core pool comptroller contract\"},\"WBNB()\":{\"notice\":\"address of WBNB contract\"},\"accessControlManager()\":{\"notice\":\"Returns the address of the access control manager contract\"},\"assetsReserves(address,address,uint8)\":{\"notice\":\"comptroller => asset => schema => balance\"},\"distributionTargets(uint256)\":{\"notice\":\"configuration for different income distribution targets\"},\"poolRegistry()\":{\"notice\":\"address of pool registry contract\"},\"setAccessControlManager(address)\":{\"notice\":\"Sets the address of AccessControlManager\"},\"totalAssetReserve(address)\":{\"notice\":\"asset => balance\"},\"vBNB()\":{\"notice\":\"address of vBNB contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol\":\"ProtocolShareReserve\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9140dabc466abab21b48b72dbda26736b1183a310d0e677d3719d201df026510\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\nimport \\\"./IAccessControlManagerV8.sol\\\";\\n\\n/**\\n * @title AccessControlledV8\\n * @author Venus\\n * @notice This contract is helper between access control manager and actual contract. This contract further inherited by other contract (using solidity 0.8.13)\\n * to integrate access controlled mechanism. It provides initialise methods and verifying access methods.\\n */\\nabstract contract AccessControlledV8 is Initializable, Ownable2StepUpgradeable {\\n    /// @notice Access control manager contract\\n    IAccessControlManagerV8 private _accessControlManager;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when access control manager contract address is changed\\n    event NewAccessControlManager(address oldAccessControlManager, address newAccessControlManager);\\n\\n    /// @notice Thrown when the action is prohibited by AccessControlManager\\n    error Unauthorized(address sender, address calledContract, string methodSignature);\\n\\n    function __AccessControlled_init(address accessControlManager_) internal onlyInitializing {\\n        __Ownable2Step_init();\\n        __AccessControlled_init_unchained(accessControlManager_);\\n    }\\n\\n    function __AccessControlled_init_unchained(address accessControlManager_) internal onlyInitializing {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of AccessControlManager\\n     * @dev Admin function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     * @custom:event Emits NewAccessControlManager event\\n     * @custom:access Only Governance\\n     */\\n    function setAccessControlManager(address accessControlManager_) external onlyOwner {\\n        _setAccessControlManager(accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Returns the address of the access control manager contract\\n     */\\n    function accessControlManager() external view returns (IAccessControlManagerV8) {\\n        return _accessControlManager;\\n    }\\n\\n    /**\\n     * @dev Internal function to set address of AccessControlManager\\n     * @param accessControlManager_ The new address of the AccessControlManager\\n     */\\n    function _setAccessControlManager(address accessControlManager_) internal {\\n        require(address(accessControlManager_) != address(0), \\\"invalid acess control manager address\\\");\\n        address oldAccessControlManager = address(_accessControlManager);\\n        _accessControlManager = IAccessControlManagerV8(accessControlManager_);\\n        emit NewAccessControlManager(oldAccessControlManager, accessControlManager_);\\n    }\\n\\n    /**\\n     * @notice Reverts if the call is not allowed by AccessControlManager\\n     * @param signature Method signature\\n     */\\n    function _checkAccessAllowed(string memory signature) internal view {\\n        bool isAllowedToCall = _accessControlManager.isAllowedToCall(msg.sender, signature);\\n\\n        if (!isAllowedToCall) {\\n            revert Unauthorized(msg.sender, address(this), signature);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dcf283925f4dddc23ca0ee71d2cb96a9dd6e4cf08061b69fde1697ea39dc514\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa29b098440d0b3a131c5ecdf25ce548790c1b5ac7bf9b5c0264b6af6f7a1e0b\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/protocol-reserve/contracts/Interfaces/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface IComptroller {\\n    function isComptroller() external view returns (bool);\\n\\n    function markets(address) external view returns (bool);\\n\\n    function getAllMarkets() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xeeb8e8d4c749f6aa69cd7740161bc5f4e802199b147ce98961d742aa1bbaf3bf\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/protocol-reserve/contracts/Interfaces/IIncomeDestination.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface IIncomeDestination {\\n    function updateAssetsState(address comptroller, address asset) external;\\n}\\n\",\"keccak256\":\"0x421edd67af6a7c5edcf321e64ea6a56b5cadbbd7ff4b7faf8b2a70891800584b\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/protocol-reserve/contracts/Interfaces/IPoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface IPoolRegistry {\\n    /// @notice Get VToken in the Pool for an Asset\\n    function getVTokenForAsset(address comptroller, address asset) external view returns (address);\\n\\n    /// @notice Get the addresss of the Pools supported that include a market for the provided asset\\n    function getPoolsSupportedByAsset(address asset) external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xf92fa4b736309b63de1e9a4025e9d471b2bff34c00a4c0e37193a1d109fd36d4\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/protocol-reserve/contracts/Interfaces/IProtocolShareReserve.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface IProtocolShareReserve {\\n    /// @notice it represents the type of vToken income\\n    enum IncomeType {\\n        SPREAD,\\n        LIQUIDATION\\n    }\\n\\n    function updateAssetsState(\\n        address comptroller,\\n        address asset,\\n        IncomeType incomeType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5fddc5b63fdd850b3b5c83576cda50dcb27a205dbb1a23af17d9da0d9f04fa0a\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/protocol-reserve/contracts/Interfaces/IVToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.25;\\n\\ninterface IVToken {\\n    function underlying() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2d10d295f7f5d2288840dd20e752eb9a997603af7fbc14f0770174591b5fa5d7\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\nimport { SafeERC20Upgradeable, IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { AccessControlledV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/AccessControlledV8.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { MaxLoopsLimitHelper } from \\\"@venusprotocol/solidity-utilities/contracts/MaxLoopsLimitHelper.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\n\\nimport { IProtocolShareReserve } from \\\"../Interfaces/IProtocolShareReserve.sol\\\";\\nimport { IComptroller } from \\\"../Interfaces/IComptroller.sol\\\";\\nimport { IPoolRegistry } from \\\"../Interfaces/IPoolRegistry.sol\\\";\\nimport { IVToken } from \\\"../Interfaces/IVToken.sol\\\";\\nimport { IIncomeDestination } from \\\"../Interfaces/IIncomeDestination.sol\\\";\\n\\nerror InvalidAddress();\\nerror UnsupportedAsset();\\nerror InvalidTotalPercentage();\\nerror InvalidMaxLoopsLimit();\\n\\ncontract ProtocolShareReserve is\\n    AccessControlledV8,\\n    ReentrancyGuardUpgradeable,\\n    MaxLoopsLimitHelper,\\n    IProtocolShareReserve\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice protocol income is categorized into two schemas.\\n    /// The first schema is for spread income\\n    /// The second schema is for liquidation income\\n    enum Schema {\\n        PROTOCOL_RESERVES,\\n        ADDITIONAL_REVENUE\\n    }\\n\\n    struct DistributionConfig {\\n        Schema schema;\\n        /// @dev percenatge is represented without any scale\\n        uint16 percentage;\\n        address destination;\\n    }\\n\\n    /// @notice address of core pool comptroller contract\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable CORE_POOL_COMPTROLLER;\\n\\n    /// @notice address of WBNB contract\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable WBNB;\\n\\n    /// @notice address of vBNB contract\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address public immutable vBNB;\\n\\n    /// @notice address of pool registry contract\\n    address public poolRegistry;\\n\\n    uint16 public constant MAX_PERCENT = 1e4;\\n\\n    /// @notice comptroller => asset => schema => balance\\n    mapping(address => mapping(address => mapping(Schema => uint256))) public assetsReserves;\\n\\n    /// @notice asset => balance\\n    mapping(address => uint256) public totalAssetReserve;\\n\\n    /// @notice configuration for different income distribution targets\\n    DistributionConfig[] public distributionTargets;\\n\\n    /// @notice Emitted when pool registry address is updated\\n    event PoolRegistryUpdated(address indexed oldPoolRegistry, address indexed newPoolRegistry);\\n\\n    /// @notice Event emitted after updating of the assets reserves.\\n    event AssetsReservesUpdated(\\n        address indexed comptroller,\\n        address indexed asset,\\n        uint256 amount,\\n        IncomeType incomeType,\\n        Schema schema\\n    );\\n\\n    /// @notice Event emitted when an asset is released to a target\\n    event AssetReleased(\\n        address indexed destination,\\n        address indexed asset,\\n        Schema schema,\\n        uint256 percent,\\n        uint256 amount\\n    );\\n\\n    /// @notice Event emitted when asset reserves state is updated\\n    event ReservesUpdated(\\n        address indexed comptroller,\\n        address indexed asset,\\n        Schema schema,\\n        uint256 oldBalance,\\n        uint256 newBalance\\n    );\\n\\n    /// @notice Event emitted when distribution configuration is updated\\n    event DistributionConfigUpdated(\\n        address indexed destination,\\n        uint16 oldPercentage,\\n        uint16 newPercentage,\\n        Schema schema\\n    );\\n\\n    /// @notice Event emitted when distribution configuration is added\\n    event DistributionConfigAdded(address indexed destination, uint16 percentage, Schema schema);\\n\\n    /// @notice Event emitted when distribution configuration is removed\\n    event DistributionConfigRemoved(address indexed destination, uint16 percentage, Schema schema);\\n\\n    /**\\n     * @dev Constructor to initialize the immutable variables\\n     * @param _corePoolComptroller The address of core pool comptroller\\n     * @param _wbnb The address of WBNB\\n     * @param _vbnb The address of vBNB\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        address _corePoolComptroller,\\n        address _wbnb,\\n        address _vbnb\\n    ) {\\n        ensureNonzeroAddress(_corePoolComptroller);\\n        ensureNonzeroAddress(_wbnb);\\n        ensureNonzeroAddress(_vbnb);\\n\\n        CORE_POOL_COMPTROLLER = _corePoolComptroller;\\n        WBNB = _wbnb;\\n        vBNB = _vbnb;\\n\\n        // Note that the contract is upgradeable. Use initialize() or reinitializers\\n        // to set the state variables.\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initializes the deployer to owner.\\n     * @param _accessControlManager The address of ACM contract\\n     * @param _loopsLimit Limit for the loops in the contract to avoid DOS\\n     */\\n    function initialize(address _accessControlManager, uint256 _loopsLimit) external initializer {\\n        __AccessControlled_init(_accessControlManager);\\n        __ReentrancyGuard_init();\\n        _setMaxLoopsLimit(_loopsLimit);\\n    }\\n\\n    /**\\n     * @dev Pool registry setter.\\n     * @param _poolRegistry Address of the pool registry\\n     * @custom:error ZeroAddressNotAllowed is thrown when pool registry address is zero\\n     */\\n    function setPoolRegistry(address _poolRegistry) external onlyOwner {\\n        ensureNonzeroAddress(_poolRegistry);\\n        emit PoolRegistryUpdated(poolRegistry, _poolRegistry);\\n        poolRegistry = _poolRegistry;\\n    }\\n\\n    /**\\n     * @dev Add or update destination targets based on destination address\\n     * @param configs configurations of the destinations.\\n     */\\n    function addOrUpdateDistributionConfigs(DistributionConfig[] calldata configs) external nonReentrant {\\n        _checkAccessAllowed(\\\"addOrUpdateDistributionConfigs(DistributionConfig[])\\\");\\n\\n        for (uint256 i = 0; i < configs.length; ) {\\n            DistributionConfig memory _config = configs[i];\\n            ensureNonzeroAddress(_config.destination);\\n\\n            bool updated = false;\\n            uint256 distributionTargetsLength = distributionTargets.length;\\n            for (uint256 j = 0; j < distributionTargetsLength; ) {\\n                DistributionConfig storage config = distributionTargets[j];\\n\\n                if (_config.schema == config.schema && config.destination == _config.destination) {\\n                    emit DistributionConfigUpdated(\\n                        _config.destination,\\n                        config.percentage,\\n                        _config.percentage,\\n                        _config.schema\\n                    );\\n                    config.percentage = _config.percentage;\\n                    updated = true;\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n\\n            if (!updated) {\\n                distributionTargets.push(_config);\\n                emit DistributionConfigAdded(_config.destination, _config.percentage, _config.schema);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        _ensurePercentages();\\n        _ensureMaxLoops(distributionTargets.length);\\n    }\\n\\n    /**\\n     * @dev Remove destionation target if percentage is 0\\n     * @param schema schema of the configuration\\n     * @param destination destination address of the configuration\\n     */\\n    function removeDistributionConfig(Schema schema, address destination) external {\\n        _checkAccessAllowed(\\\"removeDistributionConfig(Schema,address)\\\");\\n\\n        uint256 distributionIndex;\\n        bool found = false;\\n        for (uint256 i = 0; i < distributionTargets.length; ) {\\n            DistributionConfig storage config = distributionTargets[i];\\n\\n            if (schema == config.schema && destination == config.destination && config.percentage == 0) {\\n                found = true;\\n                distributionIndex = i;\\n                break;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (found) {\\n            emit DistributionConfigRemoved(\\n                distributionTargets[distributionIndex].destination,\\n                distributionTargets[distributionIndex].percentage,\\n                distributionTargets[distributionIndex].schema\\n            );\\n\\n            distributionTargets[distributionIndex] = distributionTargets[distributionTargets.length - 1];\\n            distributionTargets.pop();\\n        }\\n\\n        _ensurePercentages();\\n    }\\n\\n    /**\\n     * @dev Release funds\\n     * @param comptroller the comptroller address of the pool\\n     * @param assets assets to be released to distribution targets\\n     */\\n    function releaseFunds(address comptroller, address[] calldata assets) external nonReentrant {\\n        for (uint256 i = 0; i < assets.length; ) {\\n            _releaseFund(comptroller, assets[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Used to find out the amount of funds that's going to be released when release funds is called.\\n     * @param comptroller the comptroller address of the pool\\n     * @param schema the schema of the distribution target\\n     * @param destination the destination address of the distribution target\\n     * @param asset the asset address which will be released\\n     */\\n    function getUnreleasedFunds(\\n        address comptroller,\\n        Schema schema,\\n        address destination,\\n        address asset\\n    ) external view returns (uint256) {\\n        uint256 distributionTargetsLength = distributionTargets.length;\\n        for (uint256 i = 0; i < distributionTargetsLength; ) {\\n            DistributionConfig storage _config = distributionTargets[i];\\n            if (_config.schema == schema && _config.destination == destination) {\\n                uint256 total = assetsReserves[comptroller][asset][schema];\\n                return (total * _config.percentage) / MAX_PERCENT;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of distribution targets\\n     */\\n    function totalDistributions() external view returns (uint256) {\\n        return distributionTargets.length;\\n    }\\n\\n    /**\\n     * @dev Used to find out the percentage distribution for a particular destination based on schema\\n     * @param destination the destination address of the distribution target\\n     * @param schema the schema of the distribution target\\n     * @return percentage percentage distribution\\n     */\\n    function getPercentageDistribution(address destination, Schema schema) external view returns (uint256) {\\n        uint256 distributionTargetsLength = distributionTargets.length;\\n        for (uint256 i = 0; i < distributionTargetsLength; ) {\\n            DistributionConfig memory config = distributionTargets[i];\\n\\n            if (config.destination == destination && config.schema == schema) {\\n                return config.percentage;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Update the reserve of the asset for the specific pool after transferring to the protocol share reserve.\\n     * @param comptroller Comptroller address (pool)\\n     * @param asset Asset address.\\n     * @param incomeType type of income\\n     */\\n    function updateAssetsState(\\n        address comptroller,\\n        address asset,\\n        IncomeType incomeType\\n    ) public override(IProtocolShareReserve) nonReentrant {\\n        if (!IComptroller(comptroller).isComptroller()) revert InvalidAddress();\\n        ensureNonzeroAddress(asset);\\n\\n        if (\\n            comptroller != CORE_POOL_COMPTROLLER &&\\n            IPoolRegistry(poolRegistry).getVTokenForAsset(comptroller, asset) == address(0)\\n        ) revert InvalidAddress();\\n\\n        Schema schema = _getSchema(incomeType);\\n        uint256 currentBalance = IERC20Upgradeable(asset).balanceOf(address(this));\\n        uint256 assetReserve = totalAssetReserve[asset];\\n\\n        if (currentBalance > assetReserve) {\\n            uint256 balanceDifference;\\n            unchecked {\\n                balanceDifference = currentBalance - assetReserve;\\n            }\\n\\n            assetsReserves[comptroller][asset][schema] += balanceDifference;\\n            totalAssetReserve[asset] += balanceDifference;\\n            emit AssetsReservesUpdated(comptroller, asset, balanceDifference, incomeType, schema);\\n        }\\n    }\\n\\n    /**\\n     * @dev asset from a particular pool to be release to distribution targets\\n     * @param comptroller  Comptroller address(pool)\\n     * @param asset Asset address.\\n     */\\n    function _releaseFund(address comptroller, address asset) internal {\\n        uint256 totalSchemas = uint256(type(Schema).max) + 1;\\n        uint256[] memory schemaBalances = new uint256[](totalSchemas);\\n        uint256 totalBalance;\\n        for (uint256 schemaValue; schemaValue < totalSchemas; ) {\\n            schemaBalances[schemaValue] = assetsReserves[comptroller][asset][Schema(schemaValue)];\\n            totalBalance += schemaBalances[schemaValue];\\n\\n            unchecked {\\n                ++schemaValue;\\n            }\\n        }\\n\\n        if (totalBalance == 0) {\\n            return;\\n        }\\n\\n        uint256[] memory totalTransferAmounts = new uint256[](totalSchemas);\\n        for (uint256 i = 0; i < distributionTargets.length; ) {\\n            DistributionConfig memory _config = distributionTargets[i];\\n\\n            uint256 transferAmount = (schemaBalances[uint256(_config.schema)] * _config.percentage) / MAX_PERCENT;\\n            totalTransferAmounts[uint256(_config.schema)] += transferAmount;\\n\\n            if (transferAmount != 0) {\\n                IERC20Upgradeable(asset).safeTransfer(_config.destination, transferAmount);\\n                IIncomeDestination(_config.destination).updateAssetsState(comptroller, asset);\\n\\n                emit AssetReleased(_config.destination, asset, _config.schema, _config.percentage, transferAmount);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256[] memory newSchemaBalances = new uint256[](totalSchemas);\\n        for (uint256 schemaValue = 0; schemaValue < totalSchemas; ) {\\n            newSchemaBalances[schemaValue] = schemaBalances[schemaValue] - totalTransferAmounts[schemaValue];\\n            assetsReserves[comptroller][asset][Schema(schemaValue)] = newSchemaBalances[schemaValue];\\n            totalAssetReserve[asset] = totalAssetReserve[asset] - totalTransferAmounts[schemaValue];\\n\\n            emit ReservesUpdated(\\n                comptroller,\\n                asset,\\n                Schema(schemaValue),\\n                schemaBalances[schemaValue],\\n                newSchemaBalances[schemaValue]\\n            );\\n\\n            unchecked {\\n                ++schemaValue;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the schema based on income type\\n     * @param incomeType type of income\\n     * @return schema schema for distribution\\n     */\\n    function _getSchema(IncomeType incomeType) internal view returns (Schema schema) {\\n        schema = Schema.ADDITIONAL_REVENUE;\\n\\n        if (incomeType == IncomeType.SPREAD) {\\n            schema = Schema.PROTOCOL_RESERVES;\\n        }\\n    }\\n\\n    /**\\n     * @dev This ensures that the total percentage of all the distribution targets is 100% or 0%\\n     */\\n    function _ensurePercentages() internal view {\\n        uint256 totalSchemas = uint256(type(Schema).max) + 1;\\n        uint16[] memory totalPercentages = new uint16[](totalSchemas);\\n\\n        uint256 distributionTargetsLength = distributionTargets.length;\\n        for (uint256 i = 0; i < distributionTargetsLength; ) {\\n            DistributionConfig memory config = distributionTargets[i];\\n            totalPercentages[uint256(config.schema)] += config.percentage;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        for (uint256 schemaValue = 0; schemaValue < totalSchemas; ) {\\n            if (totalPercentages[schemaValue] != MAX_PERCENT && totalPercentages[schemaValue] != 0)\\n                revert InvalidTotalPercentage();\\n\\n            unchecked {\\n                ++schemaValue;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the underlying asset address for the vToken\\n     * @param vToken vToken address\\n     * @return asset address of asset\\n     */\\n    function _getUnderlying(address vToken) internal view returns (address) {\\n        if (vToken == vBNB) {\\n            return WBNB;\\n        } else {\\n            return IVToken(vToken).underlying();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa055981f35a958ff20ca595ffc1a93a331d06159d728e1c1d766d4545bc1ad52\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/MaxLoopsLimitHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/**\\n * @title MaxLoopsLimitHelper\\n * @author Venus\\n * @notice Abstract contract used to avoid collection with too many items that would generate gas errors and DoS.\\n */\\nabstract contract MaxLoopsLimitHelper {\\n    // Limit for the loops to avoid the DOS\\n    uint256 public maxLoopsLimit;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n\\n    /// @notice Emitted when max loops limit is set\\n    event MaxLoopsLimitUpdated(uint256 oldMaxLoopsLimit, uint256 newmaxLoopsLimit);\\n\\n    /// @notice Thrown an error on maxLoopsLimit exceeds for any loop\\n    error MaxLoopsLimitExceeded(uint256 loopsLimit, uint256 requiredLoops);\\n\\n    /**\\n     * @notice Set the limit for the loops can iterate to avoid the DOS\\n     * @param limit Limit for the max loops can execute at a time\\n     */\\n    function _setMaxLoopsLimit(uint256 limit) internal {\\n        require(limit > maxLoopsLimit, \\\"Comptroller: Invalid maxLoopsLimit\\\");\\n\\n        uint256 oldMaxLoopsLimit = maxLoopsLimit;\\n        maxLoopsLimit = limit;\\n\\n        emit MaxLoopsLimitUpdated(oldMaxLoopsLimit, limit);\\n    }\\n\\n    /**\\n     * @notice Compare the maxLoopsLimit with number of the times loop iterate\\n     * @param len Length of the loops iterate\\n     * @custom:error MaxLoopsLimitExceeded error is thrown when loops length exceeds maxLoopsLimit\\n     */\\n    function _ensureMaxLoops(uint256 len) internal view {\\n        if (len > maxLoopsLimit) {\\n            revert MaxLoopsLimitExceeded(maxLoopsLimit, len);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4c25e30635485d162177effa384eee51768b0141a567a0da16ff6ad673274166\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.25;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Thrown if the supplied value is 0 where it is not allowed\\nerror ZeroValueNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\\n/// @notice Checks if the provided value is nonzero, reverts otherwise\\n/// @param value_ Value to check\\n/// @custom:error ZeroValueNotAllowed is thrown if the provided value is 0\\nfunction ensureNonzeroValue(uint256 value_) pure {\\n    if (value_ == 0) {\\n        revert ZeroValueNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0xdb88e14d50dd21889ca3329d755673d022c47e8da005b6a545c7f69c2c4b7b86\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161290238038061290283398101604081905261002f91610178565b61003883610073565b61004182610073565b61004a81610073565b6001600160a01b0380841660805282811660a052811660c05261006b61009d565b5050506101bb565b6001600160a01b03811661009a576040516342bcdf7f60e11b815260040160405180910390fd5b50565b600054610100900460ff16156101095760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161461015a576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b80516001600160a01b038116811461017357600080fd5b919050565b60008060006060848603121561018d57600080fd5b6101968461015c565b92506101a46020850161015c565b91506101b26040850161015c565b90509250925092565b60805160a05160c0516127116101f160003960006101d9015260006102d9015260008181610399015261047301526127116000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063893ffe98116100de578063b4a0bdf311610097578063e30c397811610071578063e30c397814610370578063f2fde38b14610381578063fa7b81a014610394578063fc31116a146103bb57600080fd5b8063b4a0bdf314610343578063be26317e14610354578063cd6dc6871461035d57600080fd5b8063893ffe98146102b05780638da5cb5b146102c35780638dd95002146102d4578063966961f0146102fb578063aea211211461030e578063afcff50f1461032f57600080fd5b80634f429f36116101305780634f429f36146102355780635db6da12146102485780635f3d61331461027a578063715018a61461028d57806379ba5097146102955780637b77cd6a1461029d57600080fd5b80630e32cb86146101785780631036bbe21461018d578063163db71b146101ae57806316faecec146101c157806333e1567f146101d4578063392ee71214610213575b600080fd5b61018b610186366004612011565b6103ce565b005b61019661271081565b60405161ffff90911681526020015b60405180910390f35b610130545b6040519081526020016101a5565b61018b6101cf366004612042565b6103e2565b6101fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a5565b61022661022136600461208d565b6106f4565b6040516101a5939291906120da565b61018b610243366004612108565b610734565b6101b3610256366004612042565b61012e60209081526000938452604080852082529284528284209052825290205481565b61018b610288366004612141565b6109da565b61018b610c83565b61018b610c97565b61018b6102ab366004612011565b610d13565b6101b36102be3660046121b6565b610d82565b6033546001600160a01b03166101fb565b6101fb7f000000000000000000000000000000000000000000000000000000000000000081565b6101b3610309366004612212565b610ea4565b6101b361031c366004612011565b61012f6020526000908152604090205481565b61012d546101fb906001600160a01b031681565b6097546001600160a01b03166101fb565b6101b360fb5481565b61018b61036b366004612240565b610f99565b6065546001600160a01b03166101fb565b61018b61038f366004612011565b6110bd565b6101fb7f000000000000000000000000000000000000000000000000000000000000000081565b61018b6103c936600461226c565b61112e565b6103d6611184565b6103df816111de565b50565b6103ea6112a4565b826001600160a01b0316627e3dd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044b91906122f4565b6104685760405163e6c4247b60e01b815260040160405180910390fd5b610471826112fd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614158015610531575061012d5460405163266e0a7f60e01b81526001600160a01b0385811660048301528481166024830152600092169063266e0a7f90604401602060405180830381865afa158015610502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190612316565b6001600160a01b0316145b1561054f5760405163e6c4247b60e01b815260040160405180910390fd5b600061055a82611324565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c89190612333565b6001600160a01b038516600090815261012f6020526040902054909150808211156106e2576001600160a01b03808716600090815261012e6020908152604080832093891683529290529081208284039182919086600181111561062e5761062e6120a6565b600181111561063f5761063f6120a6565b8152602001908152602001600020600082825461065c9190612362565b90915550506001600160a01b038616600090815261012f60205260408120805483929061068a908490612362565b92505081905550856001600160a01b0316876001600160a01b03167fa46b2431e663cf7b50c9d5129aff85d2394ecfd447b7ccba83986510a9d945ea8388886040516106d893929190612375565b60405180910390a3505b5050506106ef600160c955565b505050565b610130818154811061070557600080fd5b60009182526020909120015460ff81169150610100810461ffff1690630100000090046001600160a01b031683565b6107556040518060600160405280602881526020016126806028913961134f565b600080805b61013054811015610800576000610130828154811061077b5761077b6123a2565b6000918252602090912001805490915060ff16600181111561079f5761079f6120a6565b8660018111156107b1576107b16120a6565b1480156107d1575080546001600160a01b03868116630100000090920416145b80156107e557508054610100900461ffff16155b156107f7576001925081935050610800565b5060010161075a565b5080156109cc57610130828154811061081b5761081b6123a2565b9060005260206000200160000160039054906101000a90046001600160a01b03166001600160a01b03167f70e7a210881df49522a5bf05d477e00d59e52a41c96c1eedeaeb356b9e6c81cc610130848154811061087a5761087a6123a2565b9060005260206000200160000160019054906101000a900461ffff1661013085815481106108aa576108aa6123a2565b6000918252602090912001546040516108c7929160ff16906123b8565b60405180910390a261013080546108e0906001906123d9565b815481106108f0576108f06123a2565b90600052602060002001610130838154811061090e5761090e6123a2565b60009182526020909120825491018054909160ff1690829060ff19166001838181111561093d5761093d6120a6565b02179055508154815461ffff610100928390041690910262ffff001982168117835592546001600160a01b0363010000009182900416026301000000600160b81b0319909316610100600160b81b0319909116179190911790556101308054806109a9576109a96123ec565b600082815260209020810160001990810180546001600160b81b03191690550190555b6109d46113e9565b50505050565b6109e26112a4565b610a036040518060600160405280603481526020016126a86034913961134f565b60005b81811015610c5f576000838383818110610a2257610a226123a2565b905060600201803603810190610a389190612418565b9050610a4781604001516112fd565b61013054600090815b81811015610b595760006101308281548110610a6e57610a6e6123a2565b6000918252602090912001805490915060ff166001811115610a9257610a926120a6565b85516001811115610aa557610aa56120a6565b148015610aca575060408501518154630100000090046001600160a01b039081169116145b15610b505760408581015182546020880151885193516001600160a01b03909316937fa682db621f4ae1c92cd6c492151d32fe657fc6db6e87bd65eb8bda05311f6ef293610b2393610100900461ffff1692919061249f565b60405180910390a26020850151815461ffff9091166101000262ffff001990911617905560019250610b59565b50600101610a50565b5081610c515761013080546001818101835560009290925284517f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf3490910180548693919291839160ff1916908381811115610bb657610bb66120a6565b02179055506020828101518254604094850151610100600160b81b031990911661010061ffff909316929092026301000000600160b81b0319169190911763010000006001600160a01b03928316021790925585830151908601518651935191909216927f8c96910d818618d8b1de4e1b5672a192443e87aa553f0ebe4c47f9d8c928b28292610c48929091906123b8565b60405180910390a25b836001019350505050610a06565b50610c686113e9565b61013054610c75906115a8565b610c7f600160c955565b5050565b610c8b611184565b610c9560006115d9565b565b60655433906001600160a01b03168114610d0a5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6103df816115d9565b610d1b611184565b610d24816112fd565b61012d546040516001600160a01b038084169216907fa87b964d321035d2165e484ff4b722dd6eae30606c0b98887d2ed1a34e594bfe90600090a361012d80546001600160a01b0319166001600160a01b0392909216919091179055565b61013054600090815b81811015610e995760006101308281548110610da957610da96123a2565b906000526020600020019050866001811115610dc757610dc76120a6565b815460ff166001811115610ddd57610ddd6120a6565b148015610dfd575080546001600160a01b03878116630100000090920416145b15610e90576001600160a01b03808916600090815261012e60209081526040808320938916835292905290812081896001811115610e3d57610e3d6120a6565b6001811115610e4e57610e4e6120a6565b8152602081019190915260400160002054825490915061271090610e7b90610100900461ffff16836124bb565b610e8591906124d2565b945050505050610e9c565b50600101610d8b565b50505b949350505050565b61013054600090815b81811015610f905760006101308281548110610ecb57610ecb6123a2565b60009182526020909120604080516060810190915291018054829060ff166001811115610efa57610efa6120a6565b6001811115610f0b57610f0b6120a6565b81529054610100810461ffff166020830152630100000090046001600160a01b03908116604092830152908201519192508781169116148015610f705750846001811115610f5b57610f5b6120a6565b81516001811115610f6e57610f6e6120a6565b145b15610f87576020015161ffff169250610f93915050565b50600101610ead565b50505b92915050565b600054610100900460ff1615808015610fb95750600054600160ff909116105b80610fd35750303b158015610fd3575060005460ff166001145b6110365760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d01565b6000805460ff191660011790558015611059576000805461ff0019166101001790555b611062836115f2565b61106a61162a565b61107382611659565b80156106ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6110c5611184565b606580546001600160a01b0383166001600160a01b031990911681179091556110f66033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6111366112a4565b60005b818110156111795761117184848484818110611157576111576123a2565b905060200201602081019061116c9190612011565b6116f3565b600101611139565b506106ef600160c955565b6033546001600160a01b03163314610c955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d01565b6001600160a01b0381166112425760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610d01565b609780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa091015b60405180910390a15050565b600260c954036112f65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d01565b600260c955565b6001600160a01b0381166103df576040516342bcdf7f60e11b815260040160405180910390fd5b6001600082600181111561133a5761133a6120a6565b03611343575060005b919050565b600160c955565b6097546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab906113829033908690600401612544565b602060405180830381865afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c391906122f4565b905080610c7f57333083604051634a3fa29360e01b8152600401610d0193929190612568565b60006113f6600180612362565b905060008167ffffffffffffffff81111561141357611413612402565b60405190808252806020026020018201604052801561143c578160200160208202803683370190505b506101305490915060005b818110156115255760006101308281548110611465576114656123a2565b60009182526020909120604080516060810190915291018054829060ff166001811115611494576114946120a6565b60018111156114a5576114a56120a6565b81529054610100810461ffff1660208084019190915263010000009091046001600160a01b0316604090920191909152810151815191925090859060018111156114f1576114f16120a6565b81518110611501576115016123a2565b60200260200101818151611515919061259d565b61ffff1690525050600101611447565b5060005b838110156109d45761271061ffff1683828151811061154a5761154a6123a2565b602002602001015161ffff16141580156115825750828181518110611571576115716123a2565b602002602001015161ffff16600014155b156115a057604051630b8ad7f160e01b815260040160405180910390fd5b600101611529565b60fb548111156103df5760fb5460405163792bfb1b60e11b8152600481019190915260248101829052604401610d01565b606580546001600160a01b03191690556103df81611cb3565b600054610100900460ff166116195760405162461bcd60e51b8152600401610d01906125bf565b611621611d05565b6103df81611d34565b600054610100900460ff166116515760405162461bcd60e51b8152600401610d01906125bf565b610c95611d5b565b60fb5481116116b55760405162461bcd60e51b815260206004820152602260248201527f436f6d7074726f6c6c65723a20496e76616c6964206d61784c6f6f70734c696d6044820152611a5d60f21b6064820152608401610d01565b60fb80549082905560408051828152602081018490527fc2d09fef144f7c8a86f71ea459f8fc17f675768eb1ae369cbd77fb31d467aafa9101611298565b6000611700600180612362565b905060008167ffffffffffffffff81111561171d5761171d612402565b604051908082528060200260200182016040528015611746578160200160208202803683370190505b5090506000805b8381101561180e576001600160a01b03808716600090815261012e60209081526040808320938916835292905290812090826001811115611790576117906120a6565b60018111156117a1576117a16120a6565b60018111156117b2576117b26120a6565b8152602001908152602001600020548382815181106117d3576117d36123a2565b6020026020010181815250508281815181106117f1576117f16123a2565b6020026020010151826118049190612362565b915060010161174d565b508060000361181e575050505050565b60008367ffffffffffffffff81111561183957611839612402565b604051908082528060200260200182016040528015611862578160200160208202803683370190505b50905060005b61013054811015611a7e5760006101308281548110611889576118896123a2565b60009182526020909120604080516060810190915291018054829060ff1660018111156118b8576118b86120a6565b60018111156118c9576118c96120a6565b81529054610100810461ffff90811660208085019190915263010000009092046001600160a01b0316604090930192909252820151825192935060009261271092919091169088906001811115611922576119226120a6565b81518110611932576119326123a2565b602002602001015161194491906124bb565b61194e91906124d2565b9050808483600001516001811115611968576119686120a6565b81518110611978576119786123a2565b6020026020010181815161198c9190612362565b9052508015611a745760408201516119af906001600160a01b038a169083611d82565b604080830151905163aac59a7560e01b81526001600160a01b038b811660048301528a811660248301529091169063aac59a7590604401600060405180830381600087803b158015611a0057600080fd5b505af1158015611a14573d6000803e3d6000fd5b50505050876001600160a01b031682604001516001600160a01b03167f09f71e7b22d78540ee9a42f09917a9d62f46735cb0dfa70d6bab27866d9cb5008460000151856020015185604051611a6b9392919061260a565b60405180910390a35b5050600101611868565b5060008467ffffffffffffffff811115611a9a57611a9a612402565b604051908082528060200260200182016040528015611ac3578160200160208202803683370190505b50905060005b85811015611ca957828181518110611ae357611ae36123a2565b6020026020010151858281518110611afd57611afd6123a2565b6020026020010151611b0f91906123d9565b828281518110611b2157611b216123a2565b602002602001018181525050818181518110611b3f57611b3f6123a2565b6020908102919091018101516001600160a01b03808b16600090815261012e84526040808220928c1682529190935282209091836001811115611b8457611b846120a6565b6001811115611b9557611b956120a6565b6001811115611ba657611ba66120a6565b815260200190815260200160002081905550828181518110611bca57611bca6123a2565b602002602001015161012f6000896001600160a01b03166001600160a01b0316815260200190815260200160002054611c0391906123d9565b6001600160a01b03808916600081815261012f602052604090209290925589167f7d881f3d6246a6a2b97b121b8ba093c17497912c68e8b2bca6108528e91df3ca836001811115611c5657611c566120a6565b888581518110611c6857611c686123a2565b6020026020010151868681518110611c8257611c826123a2565b6020026020010151604051611c999392919061262f565b60405180910390a3600101611ac9565b5050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611d2c5760405162461bcd60e51b8152600401610d01906125bf565b610c95611dd4565b600054610100900460ff166103d65760405162461bcd60e51b8152600401610d01906125bf565b600054610100900460ff166113485760405162461bcd60e51b8152600401610d01906125bf565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106ef908490611e04565b600054610100900460ff16611dfb5760405162461bcd60e51b8152600401610d01906125bf565b610c95336115d9565b6000611e59826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ed99092919063ffffffff16565b9050805160001480611e7a575080806020019051810190611e7a91906122f4565b6106ef5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d01565b6060610e9c848460008585600080866001600160a01b03168587604051611f009190612650565b60006040518083038185875af1925050503d8060008114611f3d576040519150601f19603f3d011682016040523d82523d6000602084013e611f42565b606091505b5091509150611f5387838387611f5e565b979650505050505050565b60608315611fcd578251600003611fc6576001600160a01b0385163b611fc65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d01565b5081610e9c565b610e9c8383815115611fe25781518083602001fd5b8060405162461bcd60e51b8152600401610d01919061266c565b6001600160a01b03811681146103df57600080fd5b60006020828403121561202357600080fd5b813561202e81611ffc565b9392505050565b600281106103df57600080fd5b60008060006060848603121561205757600080fd5b833561206281611ffc565b9250602084013561207281611ffc565b9150604084013561208281612035565b809150509250925092565b60006020828403121561209f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600281106103df57634e487b7160e01b600052602160045260246000fd5b606081016120e7856120bc565b93815261ffff9290921660208301526001600160a01b031660409091015290565b6000806040838503121561211b57600080fd5b823561212681612035565b9150602083013561213681611ffc565b809150509250929050565b6000806020838503121561215457600080fd5b823567ffffffffffffffff8082111561216c57600080fd5b818501915085601f83011261218057600080fd5b81358181111561218f57600080fd5b8660206060830285010111156121a457600080fd5b60209290920196919550909350505050565b600080600080608085870312156121cc57600080fd5b84356121d781611ffc565b935060208501356121e781612035565b925060408501356121f781611ffc565b9150606085013561220781611ffc565b939692955090935050565b6000806040838503121561222557600080fd5b823561223081611ffc565b9150602083013561213681612035565b6000806040838503121561225357600080fd5b823561225e81611ffc565b946020939093013593505050565b60008060006040848603121561228157600080fd5b833561228c81611ffc565b9250602084013567ffffffffffffffff808211156122a957600080fd5b818601915086601f8301126122bd57600080fd5b8135818111156122cc57600080fd5b8760208260051b85010111156122e157600080fd5b6020830194508093505050509250925092565b60006020828403121561230657600080fd5b8151801515811461202e57600080fd5b60006020828403121561232857600080fd5b815161202e81611ffc565b60006020828403121561234557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f9357610f9361234c565b83815260608101612385846120bc565b836020830152612394836120bc565b826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b61ffff83168152604081016123cc836120bc565b8260208301529392505050565b81810381811115610f9357610f9361234c565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60006060828403121561242a57600080fd5b6040516060810181811067ffffffffffffffff8211171561245b57634e487b7160e01b600052604160045260246000fd5b604052823561246981612035565b8152602083013561ffff8116811461248057600080fd5b6020820152604083013561249381611ffc565b60408201529392505050565b61ffff84811682528316602082015260608101612394836120bc565b8082028115828204841417610f9357610f9361234c565b6000826124ef57634e487b7160e01b600052601260045260246000fd5b500490565b60005b8381101561250f5781810151838201526020016124f7565b50506000910152565b600081518084526125308160208601602086016124f4565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610e9c90830184612518565b6001600160a01b0384811682528316602082015260606040820181905260009061259490830184612518565b95945050505050565b61ffff8181168382160190808211156125b8576125b861234c565b5092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60608101612617856120bc565b93815261ffff92909216602083015260409091015290565b6060810161263c856120bc565b938152602081019290925260409091015290565b600082516126628184602087016124f4565b9190910192915050565b60208152600061202e602083018461251856fe72656d6f7665446973747269627574696f6e436f6e66696728536368656d612c61646472657373296164644f72557064617465446973747269627574696f6e436f6e6669677328446973747269627574696f6e436f6e6669675b5d29a26469706673582212204c6d459a0bf1da26566345064da3efec55897cd08c814b5d89cd88590692132864736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c8063893ffe98116100de578063b4a0bdf311610097578063e30c397811610071578063e30c397814610370578063f2fde38b14610381578063fa7b81a014610394578063fc31116a146103bb57600080fd5b8063b4a0bdf314610343578063be26317e14610354578063cd6dc6871461035d57600080fd5b8063893ffe98146102b05780638da5cb5b146102c35780638dd95002146102d4578063966961f0146102fb578063aea211211461030e578063afcff50f1461032f57600080fd5b80634f429f36116101305780634f429f36146102355780635db6da12146102485780635f3d61331461027a578063715018a61461028d57806379ba5097146102955780637b77cd6a1461029d57600080fd5b80630e32cb86146101785780631036bbe21461018d578063163db71b146101ae57806316faecec146101c157806333e1567f146101d4578063392ee71214610213575b600080fd5b61018b610186366004612011565b6103ce565b005b61019661271081565b60405161ffff90911681526020015b60405180910390f35b610130545b6040519081526020016101a5565b61018b6101cf366004612042565b6103e2565b6101fb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a5565b61022661022136600461208d565b6106f4565b6040516101a5939291906120da565b61018b610243366004612108565b610734565b6101b3610256366004612042565b61012e60209081526000938452604080852082529284528284209052825290205481565b61018b610288366004612141565b6109da565b61018b610c83565b61018b610c97565b61018b6102ab366004612011565b610d13565b6101b36102be3660046121b6565b610d82565b6033546001600160a01b03166101fb565b6101fb7f000000000000000000000000000000000000000000000000000000000000000081565b6101b3610309366004612212565b610ea4565b6101b361031c366004612011565b61012f6020526000908152604090205481565b61012d546101fb906001600160a01b031681565b6097546001600160a01b03166101fb565b6101b360fb5481565b61018b61036b366004612240565b610f99565b6065546001600160a01b03166101fb565b61018b61038f366004612011565b6110bd565b6101fb7f000000000000000000000000000000000000000000000000000000000000000081565b61018b6103c936600461226c565b61112e565b6103d6611184565b6103df816111de565b50565b6103ea6112a4565b826001600160a01b0316627e3dd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044b91906122f4565b6104685760405163e6c4247b60e01b815260040160405180910390fd5b610471826112fd565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614158015610531575061012d5460405163266e0a7f60e01b81526001600160a01b0385811660048301528481166024830152600092169063266e0a7f90604401602060405180830381865afa158015610502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105269190612316565b6001600160a01b0316145b1561054f5760405163e6c4247b60e01b815260040160405180910390fd5b600061055a82611324565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156105a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c89190612333565b6001600160a01b038516600090815261012f6020526040902054909150808211156106e2576001600160a01b03808716600090815261012e6020908152604080832093891683529290529081208284039182919086600181111561062e5761062e6120a6565b600181111561063f5761063f6120a6565b8152602001908152602001600020600082825461065c9190612362565b90915550506001600160a01b038616600090815261012f60205260408120805483929061068a908490612362565b92505081905550856001600160a01b0316876001600160a01b03167fa46b2431e663cf7b50c9d5129aff85d2394ecfd447b7ccba83986510a9d945ea8388886040516106d893929190612375565b60405180910390a3505b5050506106ef600160c955565b505050565b610130818154811061070557600080fd5b60009182526020909120015460ff81169150610100810461ffff1690630100000090046001600160a01b031683565b6107556040518060600160405280602881526020016126806028913961134f565b600080805b61013054811015610800576000610130828154811061077b5761077b6123a2565b6000918252602090912001805490915060ff16600181111561079f5761079f6120a6565b8660018111156107b1576107b16120a6565b1480156107d1575080546001600160a01b03868116630100000090920416145b80156107e557508054610100900461ffff16155b156107f7576001925081935050610800565b5060010161075a565b5080156109cc57610130828154811061081b5761081b6123a2565b9060005260206000200160000160039054906101000a90046001600160a01b03166001600160a01b03167f70e7a210881df49522a5bf05d477e00d59e52a41c96c1eedeaeb356b9e6c81cc610130848154811061087a5761087a6123a2565b9060005260206000200160000160019054906101000a900461ffff1661013085815481106108aa576108aa6123a2565b6000918252602090912001546040516108c7929160ff16906123b8565b60405180910390a261013080546108e0906001906123d9565b815481106108f0576108f06123a2565b90600052602060002001610130838154811061090e5761090e6123a2565b60009182526020909120825491018054909160ff1690829060ff19166001838181111561093d5761093d6120a6565b02179055508154815461ffff610100928390041690910262ffff001982168117835592546001600160a01b0363010000009182900416026301000000600160b81b0319909316610100600160b81b0319909116179190911790556101308054806109a9576109a96123ec565b600082815260209020810160001990810180546001600160b81b03191690550190555b6109d46113e9565b50505050565b6109e26112a4565b610a036040518060600160405280603481526020016126a86034913961134f565b60005b81811015610c5f576000838383818110610a2257610a226123a2565b905060600201803603810190610a389190612418565b9050610a4781604001516112fd565b61013054600090815b81811015610b595760006101308281548110610a6e57610a6e6123a2565b6000918252602090912001805490915060ff166001811115610a9257610a926120a6565b85516001811115610aa557610aa56120a6565b148015610aca575060408501518154630100000090046001600160a01b039081169116145b15610b505760408581015182546020880151885193516001600160a01b03909316937fa682db621f4ae1c92cd6c492151d32fe657fc6db6e87bd65eb8bda05311f6ef293610b2393610100900461ffff1692919061249f565b60405180910390a26020850151815461ffff9091166101000262ffff001990911617905560019250610b59565b50600101610a50565b5081610c515761013080546001818101835560009290925284517f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf3490910180548693919291839160ff1916908381811115610bb657610bb66120a6565b02179055506020828101518254604094850151610100600160b81b031990911661010061ffff909316929092026301000000600160b81b0319169190911763010000006001600160a01b03928316021790925585830151908601518651935191909216927f8c96910d818618d8b1de4e1b5672a192443e87aa553f0ebe4c47f9d8c928b28292610c48929091906123b8565b60405180910390a25b836001019350505050610a06565b50610c686113e9565b61013054610c75906115a8565b610c7f600160c955565b5050565b610c8b611184565b610c9560006115d9565b565b60655433906001600160a01b03168114610d0a5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6103df816115d9565b610d1b611184565b610d24816112fd565b61012d546040516001600160a01b038084169216907fa87b964d321035d2165e484ff4b722dd6eae30606c0b98887d2ed1a34e594bfe90600090a361012d80546001600160a01b0319166001600160a01b0392909216919091179055565b61013054600090815b81811015610e995760006101308281548110610da957610da96123a2565b906000526020600020019050866001811115610dc757610dc76120a6565b815460ff166001811115610ddd57610ddd6120a6565b148015610dfd575080546001600160a01b03878116630100000090920416145b15610e90576001600160a01b03808916600090815261012e60209081526040808320938916835292905290812081896001811115610e3d57610e3d6120a6565b6001811115610e4e57610e4e6120a6565b8152602081019190915260400160002054825490915061271090610e7b90610100900461ffff16836124bb565b610e8591906124d2565b945050505050610e9c565b50600101610d8b565b50505b949350505050565b61013054600090815b81811015610f905760006101308281548110610ecb57610ecb6123a2565b60009182526020909120604080516060810190915291018054829060ff166001811115610efa57610efa6120a6565b6001811115610f0b57610f0b6120a6565b81529054610100810461ffff166020830152630100000090046001600160a01b03908116604092830152908201519192508781169116148015610f705750846001811115610f5b57610f5b6120a6565b81516001811115610f6e57610f6e6120a6565b145b15610f87576020015161ffff169250610f93915050565b50600101610ead565b50505b92915050565b600054610100900460ff1615808015610fb95750600054600160ff909116105b80610fd35750303b158015610fd3575060005460ff166001145b6110365760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610d01565b6000805460ff191660011790558015611059576000805461ff0019166101001790555b611062836115f2565b61106a61162a565b61107382611659565b80156106ef576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6110c5611184565b606580546001600160a01b0383166001600160a01b031990911681179091556110f66033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6111366112a4565b60005b818110156111795761117184848484818110611157576111576123a2565b905060200201602081019061116c9190612011565b6116f3565b600101611139565b506106ef600160c955565b6033546001600160a01b03163314610c955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d01565b6001600160a01b0381166112425760405162461bcd60e51b815260206004820152602560248201527f696e76616c696420616365737320636f6e74726f6c206d616e61676572206164604482015264647265737360d81b6064820152608401610d01565b609780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa091015b60405180910390a15050565b600260c954036112f65760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610d01565b600260c955565b6001600160a01b0381166103df576040516342bcdf7f60e11b815260040160405180910390fd5b6001600082600181111561133a5761133a6120a6565b03611343575060005b919050565b600160c955565b6097546040516318c5e8ab60e01b81526000916001600160a01b0316906318c5e8ab906113829033908690600401612544565b602060405180830381865afa15801561139f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c391906122f4565b905080610c7f57333083604051634a3fa29360e01b8152600401610d0193929190612568565b60006113f6600180612362565b905060008167ffffffffffffffff81111561141357611413612402565b60405190808252806020026020018201604052801561143c578160200160208202803683370190505b506101305490915060005b818110156115255760006101308281548110611465576114656123a2565b60009182526020909120604080516060810190915291018054829060ff166001811115611494576114946120a6565b60018111156114a5576114a56120a6565b81529054610100810461ffff1660208084019190915263010000009091046001600160a01b0316604090920191909152810151815191925090859060018111156114f1576114f16120a6565b81518110611501576115016123a2565b60200260200101818151611515919061259d565b61ffff1690525050600101611447565b5060005b838110156109d45761271061ffff1683828151811061154a5761154a6123a2565b602002602001015161ffff16141580156115825750828181518110611571576115716123a2565b602002602001015161ffff16600014155b156115a057604051630b8ad7f160e01b815260040160405180910390fd5b600101611529565b60fb548111156103df5760fb5460405163792bfb1b60e11b8152600481019190915260248101829052604401610d01565b606580546001600160a01b03191690556103df81611cb3565b600054610100900460ff166116195760405162461bcd60e51b8152600401610d01906125bf565b611621611d05565b6103df81611d34565b600054610100900460ff166116515760405162461bcd60e51b8152600401610d01906125bf565b610c95611d5b565b60fb5481116116b55760405162461bcd60e51b815260206004820152602260248201527f436f6d7074726f6c6c65723a20496e76616c6964206d61784c6f6f70734c696d6044820152611a5d60f21b6064820152608401610d01565b60fb80549082905560408051828152602081018490527fc2d09fef144f7c8a86f71ea459f8fc17f675768eb1ae369cbd77fb31d467aafa9101611298565b6000611700600180612362565b905060008167ffffffffffffffff81111561171d5761171d612402565b604051908082528060200260200182016040528015611746578160200160208202803683370190505b5090506000805b8381101561180e576001600160a01b03808716600090815261012e60209081526040808320938916835292905290812090826001811115611790576117906120a6565b60018111156117a1576117a16120a6565b60018111156117b2576117b26120a6565b8152602001908152602001600020548382815181106117d3576117d36123a2565b6020026020010181815250508281815181106117f1576117f16123a2565b6020026020010151826118049190612362565b915060010161174d565b508060000361181e575050505050565b60008367ffffffffffffffff81111561183957611839612402565b604051908082528060200260200182016040528015611862578160200160208202803683370190505b50905060005b61013054811015611a7e5760006101308281548110611889576118896123a2565b60009182526020909120604080516060810190915291018054829060ff1660018111156118b8576118b86120a6565b60018111156118c9576118c96120a6565b81529054610100810461ffff90811660208085019190915263010000009092046001600160a01b0316604090930192909252820151825192935060009261271092919091169088906001811115611922576119226120a6565b81518110611932576119326123a2565b602002602001015161194491906124bb565b61194e91906124d2565b9050808483600001516001811115611968576119686120a6565b81518110611978576119786123a2565b6020026020010181815161198c9190612362565b9052508015611a745760408201516119af906001600160a01b038a169083611d82565b604080830151905163aac59a7560e01b81526001600160a01b038b811660048301528a811660248301529091169063aac59a7590604401600060405180830381600087803b158015611a0057600080fd5b505af1158015611a14573d6000803e3d6000fd5b50505050876001600160a01b031682604001516001600160a01b03167f09f71e7b22d78540ee9a42f09917a9d62f46735cb0dfa70d6bab27866d9cb5008460000151856020015185604051611a6b9392919061260a565b60405180910390a35b5050600101611868565b5060008467ffffffffffffffff811115611a9a57611a9a612402565b604051908082528060200260200182016040528015611ac3578160200160208202803683370190505b50905060005b85811015611ca957828181518110611ae357611ae36123a2565b6020026020010151858281518110611afd57611afd6123a2565b6020026020010151611b0f91906123d9565b828281518110611b2157611b216123a2565b602002602001018181525050818181518110611b3f57611b3f6123a2565b6020908102919091018101516001600160a01b03808b16600090815261012e84526040808220928c1682529190935282209091836001811115611b8457611b846120a6565b6001811115611b9557611b956120a6565b6001811115611ba657611ba66120a6565b815260200190815260200160002081905550828181518110611bca57611bca6123a2565b602002602001015161012f6000896001600160a01b03166001600160a01b0316815260200190815260200160002054611c0391906123d9565b6001600160a01b03808916600081815261012f602052604090209290925589167f7d881f3d6246a6a2b97b121b8ba093c17497912c68e8b2bca6108528e91df3ca836001811115611c5657611c566120a6565b888581518110611c6857611c686123a2565b6020026020010151868681518110611c8257611c826123a2565b6020026020010151604051611c999392919061262f565b60405180910390a3600101611ac9565b5050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611d2c5760405162461bcd60e51b8152600401610d01906125bf565b610c95611dd4565b600054610100900460ff166103d65760405162461bcd60e51b8152600401610d01906125bf565b600054610100900460ff166113485760405162461bcd60e51b8152600401610d01906125bf565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526106ef908490611e04565b600054610100900460ff16611dfb5760405162461bcd60e51b8152600401610d01906125bf565b610c95336115d9565b6000611e59826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ed99092919063ffffffff16565b9050805160001480611e7a575080806020019051810190611e7a91906122f4565b6106ef5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d01565b6060610e9c848460008585600080866001600160a01b03168587604051611f009190612650565b60006040518083038185875af1925050503d8060008114611f3d576040519150601f19603f3d011682016040523d82523d6000602084013e611f42565b606091505b5091509150611f5387838387611f5e565b979650505050505050565b60608315611fcd578251600003611fc6576001600160a01b0385163b611fc65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d01565b5081610e9c565b610e9c8383815115611fe25781518083602001fd5b8060405162461bcd60e51b8152600401610d01919061266c565b6001600160a01b03811681146103df57600080fd5b60006020828403121561202357600080fd5b813561202e81611ffc565b9392505050565b600281106103df57600080fd5b60008060006060848603121561205757600080fd5b833561206281611ffc565b9250602084013561207281611ffc565b9150604084013561208281612035565b809150509250925092565b60006020828403121561209f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600281106103df57634e487b7160e01b600052602160045260246000fd5b606081016120e7856120bc565b93815261ffff9290921660208301526001600160a01b031660409091015290565b6000806040838503121561211b57600080fd5b823561212681612035565b9150602083013561213681611ffc565b809150509250929050565b6000806020838503121561215457600080fd5b823567ffffffffffffffff8082111561216c57600080fd5b818501915085601f83011261218057600080fd5b81358181111561218f57600080fd5b8660206060830285010111156121a457600080fd5b60209290920196919550909350505050565b600080600080608085870312156121cc57600080fd5b84356121d781611ffc565b935060208501356121e781612035565b925060408501356121f781611ffc565b9150606085013561220781611ffc565b939692955090935050565b6000806040838503121561222557600080fd5b823561223081611ffc565b9150602083013561213681612035565b6000806040838503121561225357600080fd5b823561225e81611ffc565b946020939093013593505050565b60008060006040848603121561228157600080fd5b833561228c81611ffc565b9250602084013567ffffffffffffffff808211156122a957600080fd5b818601915086601f8301126122bd57600080fd5b8135818111156122cc57600080fd5b8760208260051b85010111156122e157600080fd5b6020830194508093505050509250925092565b60006020828403121561230657600080fd5b8151801515811461202e57600080fd5b60006020828403121561232857600080fd5b815161202e81611ffc565b60006020828403121561234557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610f9357610f9361234c565b83815260608101612385846120bc565b836020830152612394836120bc565b826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b61ffff83168152604081016123cc836120bc565b8260208301529392505050565b81810381811115610f9357610f9361234c565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60006060828403121561242a57600080fd5b6040516060810181811067ffffffffffffffff8211171561245b57634e487b7160e01b600052604160045260246000fd5b604052823561246981612035565b8152602083013561ffff8116811461248057600080fd5b6020820152604083013561249381611ffc565b60408201529392505050565b61ffff84811682528316602082015260608101612394836120bc565b8082028115828204841417610f9357610f9361234c565b6000826124ef57634e487b7160e01b600052601260045260246000fd5b500490565b60005b8381101561250f5781810151838201526020016124f7565b50506000910152565b600081518084526125308160208601602086016124f4565b601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610e9c90830184612518565b6001600160a01b0384811682528316602082015260606040820181905260009061259490830184612518565b95945050505050565b61ffff8181168382160190808211156125b8576125b861234c565b5092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60608101612617856120bc565b93815261ffff92909216602083015260409091015290565b6060810161263c856120bc565b938152602081019290925260409091015290565b600082516126628184602087016124f4565b9190910192915050565b60208152600061202e602083018461251856fe72656d6f7665446973747269627574696f6e436f6e66696728536368656d612c61646472657373296164644f72557064617465446973747269627574696f6e436f6e6669677328446973747269627574696f6e436f6e6669675b5d29a26469706673582212204c6d459a0bf1da26566345064da3efec55897cd08c814b5d89cd88590692132864736f6c63430008190033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "addOrUpdateDistributionConfigs((uint8,uint16,address)[])": {
        "details": "Add or update destination targets based on destination address",
        "params": {
          "configs": "configurations of the destinations."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getPercentageDistribution(address,uint8)": {
        "details": "Used to find out the percentage distribution for a particular destination based on schema",
        "params": {
          "destination": "the destination address of the distribution target",
          "schema": "the schema of the distribution target"
        },
        "returns": {
          "_0": "percentage percentage distribution"
        }
      },
      "getUnreleasedFunds(address,uint8,address,address)": {
        "details": "Used to find out the amount of funds that's going to be released when release funds is called.",
        "params": {
          "asset": "the asset address which will be released",
          "comptroller": "the comptroller address of the pool",
          "destination": "the destination address of the distribution target",
          "schema": "the schema of the distribution target"
        }
      },
      "initialize(address,uint256)": {
        "details": "Initializes the deployer to owner.",
        "params": {
          "_accessControlManager": "The address of ACM contract",
          "_loopsLimit": "Limit for the loops in the contract to avoid DOS"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "releaseFunds(address,address[])": {
        "details": "Release funds",
        "params": {
          "assets": "assets to be released to distribution targets",
          "comptroller": "the comptroller address of the pool"
        }
      },
      "removeDistributionConfig(uint8,address)": {
        "details": "Remove destionation target if percentage is 0",
        "params": {
          "destination": "destination address of the configuration",
          "schema": "schema of the configuration"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAccessControlManager(address)": {
        "custom:access": "Only Governance",
        "custom:event": "Emits NewAccessControlManager event",
        "details": "Admin function to set address of AccessControlManager",
        "params": {
          "accessControlManager_": "The new address of the AccessControlManager"
        }
      },
      "setPoolRegistry(address)": {
        "custom:error": "ZeroAddressNotAllowed is thrown when pool registry address is zero",
        "details": "Pool registry setter.",
        "params": {
          "_poolRegistry": "Address of the pool registry"
        }
      },
      "totalDistributions()": {
        "details": "Returns the total number of distribution targets"
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "updateAssetsState(address,address,uint8)": {
        "details": "Update the reserve of the asset for the specific pool after transferring to the protocol share reserve.",
        "params": {
          "asset": "Asset address.",
          "comptroller": "Comptroller address (pool)",
          "incomeType": "type of income"
        }
      }
    },
    "stateVariables": {
      "CORE_POOL_COMPTROLLER": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "WBNB": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      },
      "vBNB": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "MaxLoopsLimitExceeded(uint256,uint256)": [
        {
          "notice": "Thrown an error on maxLoopsLimit exceeds for any loop"
        }
      ],
      "Unauthorized(address,address,string)": [
        {
          "notice": "Thrown when the action is prohibited by AccessControlManager"
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "events": {
      "AssetReleased(address,address,uint8,uint256,uint256)": {
        "notice": "Event emitted when an asset is released to a target"
      },
      "AssetsReservesUpdated(address,address,uint256,uint8,uint8)": {
        "notice": "Event emitted after updating of the assets reserves."
      },
      "DistributionConfigAdded(address,uint16,uint8)": {
        "notice": "Event emitted when distribution configuration is added"
      },
      "DistributionConfigRemoved(address,uint16,uint8)": {
        "notice": "Event emitted when distribution configuration is removed"
      },
      "DistributionConfigUpdated(address,uint16,uint16,uint8)": {
        "notice": "Event emitted when distribution configuration is updated"
      },
      "MaxLoopsLimitUpdated(uint256,uint256)": {
        "notice": "Emitted when max loops limit is set"
      },
      "NewAccessControlManager(address,address)": {
        "notice": "Emitted when access control manager contract address is changed"
      },
      "PoolRegistryUpdated(address,address)": {
        "notice": "Emitted when pool registry address is updated"
      },
      "ReservesUpdated(address,address,uint8,uint256,uint256)": {
        "notice": "Event emitted when asset reserves state is updated"
      }
    },
    "kind": "user",
    "methods": {
      "CORE_POOL_COMPTROLLER()": {
        "notice": "address of core pool comptroller contract"
      },
      "WBNB()": {
        "notice": "address of WBNB contract"
      },
      "accessControlManager()": {
        "notice": "Returns the address of the access control manager contract"
      },
      "assetsReserves(address,address,uint8)": {
        "notice": "comptroller => asset => schema => balance"
      },
      "distributionTargets(uint256)": {
        "notice": "configuration for different income distribution targets"
      },
      "poolRegistry()": {
        "notice": "address of pool registry contract"
      },
      "setAccessControlManager(address)": {
        "notice": "Sets the address of AccessControlManager"
      },
      "totalAssetReserve(address)": {
        "notice": "asset => balance"
      },
      "vBNB()": {
        "notice": "address of vBNB contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 292,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 295,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1562,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 164,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 284,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 57,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 151,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7293,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_accessControlManager",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IAccessControlManagerV8)7478"
      },
      {
        "astId": 7298,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 597,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 666,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9661,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "maxLoopsLimit",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 9666,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8570,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "poolRegistry",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 8583,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "assetsReserves",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_enum(Schema)8549,t_uint256)))"
      },
      {
        "astId": 8588,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "totalAssetReserve",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8593,
        "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
        "label": "distributionTargets",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_struct(DistributionConfig)8558_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(DistributionConfig)8558_storage)dyn_storage": {
        "base": "t_struct(DistributionConfig)8558_storage",
        "encoding": "dynamic_array",
        "label": "struct ProtocolShareReserve.DistributionConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlManagerV8)7478": {
        "encoding": "inplace",
        "label": "contract IAccessControlManagerV8",
        "numberOfBytes": "20"
      },
      "t_enum(Schema)8549": {
        "encoding": "inplace",
        "label": "enum ProtocolShareReserve.Schema",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_enum(Schema)8549,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(enum ProtocolShareReserve.Schema => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_enum(Schema)8549,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_enum(Schema)8549,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum ProtocolShareReserve.Schema => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(Schema)8549,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Schema)8549,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Schema)8549",
        "label": "mapping(enum ProtocolShareReserve.Schema => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(DistributionConfig)8558_storage": {
        "encoding": "inplace",
        "label": "struct ProtocolShareReserve.DistributionConfig",
        "members": [
          {
            "astId": 8552,
            "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
            "label": "schema",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Schema)8549"
          },
          {
            "astId": 8555,
            "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
            "label": "percentage",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8557,
            "contract": "@venusprotocol/protocol-reserve/contracts/ProtocolReserve/ProtocolShareReserve.sol:ProtocolShareReserve",
            "label": "destination",
            "offset": 3,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}